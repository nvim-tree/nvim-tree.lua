*nvim-tree.lua* A File Explorer For Neovim Written In Lua

Author: Yazdani Kiyan <yazdani.kiyan@protonmail.com>

==============================================================================
CONTENTS                                                           *nvim-tree*

  1. Introduction                             |nvim-tree-introduction|
  2. Quickstart                               |nvim-tree-quickstart|
  3. Commands                                 |nvim-tree-commands|
  4. Setup/Configuration                      |nvim-tree-setup|
  5. Api                                      |nvim-tree-api|
  6. Mappings                                 |nvim-tree-mappings|
  7. Highlight Groups                         |nvim-tree-highlight|
  8. Events                                   |nvim-tree-events|
  9. Bookmarks                                |nvim-tree-bookmarks|
 10. OS Specific Restrictions                 |nvim-tree-os-specific|

==============================================================================
 1. INTRODUCTION                                      *nvim-tree-introduction*

Features

    - Automatic updates
    - File type icons
    - Git integration
    - Diagnostics integration: LSP and COC
    - (Live) filtering
    - Cut, copy, paste, rename, delete, create
    - Highly customisable

File Icons

    https://github.com/nvim-tree/nvim-web-devicons is optional and used to display file icons.
    It requires a patched font: https://www.nerdfonts.com
    Your terminal emulator must be configured to use that font, usually "Hack Nerd Font"

     should look like an open folder.

    To disable the display of icons see |renderer.icons.show|

Colours

    Syntax highlighting uses g:terminal_color_ from colorschemes, falls back to
    ugly colors otherwise.

Git Integration

    Icon indicates when a file is:
    - ✗  unstaged or folder is dirty
    - ✓  staged
    - ★  new file
    - ✓ ✗ partially staged
    - ✓ ★ new file staged
    - ✓ ★ ✗ new file staged and has unstaged modifications
    - ═  merging
    - ➜  renamed

Requirements

    This file explorer requires `neovim >= 0.8.0`

==============================================================================
 2. QUICK START                                         *nvim-tree-quickstart*

Setup should be run in a lua file or in a |lua-heredoc| if using in a vim file.

    -- examples for your init.lua

    -- disable netrw at the very start of your init.lua (strongly advised)
    vim.g.loaded_netrw = 1
    vim.g.loaded_netrwPlugin = 1

    -- set termguicolors to enable highlight groups
    vim.opt.termguicolors = true

    -- empty setup using defaults
    require("nvim-tree").setup()

    -- OR setup with some options
    require("nvim-tree").setup({
      sort_by = "case_sensitive",
      view = {
        width = 30,
        mappings = {
          list = {
            { key = "u", action = "dir_up" },
          },
        },
      },
      renderer = {
        group_empty = true,
      },
      filters = {
        dotfiles = true,
      },
    })
<
==============================================================================
 3. COMMANDS                                              *nvim-tree-commands*

|:NvimTreeOpen|

    opens the tree. Takes an optional path argument.

|:NvimTreeClose|

    closes the tree

|:NvimTreeToggle|

    open or close the tree. Takes an optional path argument.

|:NvimTreeFocus|

    open the tree if it is closed, and then focus on the tree

|:NvimTreeRefresh|

    refresh the tree

|:NvimTreeFindFile|

    The command will change the cursor in the tree for the current bufname.

    It will also open the leafs of the tree leading to the file in the buffer
    (if you opened a file with something else than the NvimTree, like `fzf` or
    `:split`)

    Invoke with a bang `:NvimTreeFindFile!` to update the root.

|:NvimTreeFindFileToggle|

    close the tree or change the cursor in the tree for the current bufname,
    similar to combination of |:NvimTreeToggle| and |:NvimTreeFindFile|. Takes an
    optional path argument.

    Invoke with a bang `:NvimTreeFindFileToggle!` to update the root.

|:NvimTreeClipboard|

    Print clipboard content for both cut and copy

|:NvimTreeResize|

    Resize the NvimTree window to the given size. Example: `:NvimTreeResize 50`
    resizes the window to the width of 50. If the size starts with "+" or "-" it
    adds or removes the given value to the current window width.
    Example `:NvimTreeResize -20` removes the value 20 from the current width. And
    `:NvimTreeResize +20` adds the value 20 to the current width.

|:NvimTreeCollapse|

    Collapses the nvim-tree recursively.

|:NvimTreeCollapseKeepBuffers|

    Collapses the nvim-tree recursively, but keep the directories open, which are
    used in an open buffer.


==============================================================================
 4. SETUP                                                    *nvim-tree-setup*

You must run setup() function to initialise nvim-tree.

setup() function takes one optional argument: configuration table. If omitted
nvim-tree will be initialised with default configuration.

Subsequent calls to setup will replace the previous configuration.
>
    require("nvim-tree").setup { -- BEGIN_DEFAULT_OPTS
      auto_reload_on_write = true,
      disable_netrw = false,
      hijack_cursor = false,
      hijack_netrw = true,
      hijack_unnamed_buffer_when_opening = false,
      ignore_buffer_on_setup = false,
      open_on_setup = false,
      open_on_setup_file = false,
      sort_by = "name",
      root_dirs = {},
      prefer_startup_root = false,
      sync_root_with_cwd = false,
      reload_on_bufenter = false,
      respect_buf_cwd = false,
      on_attach = "disable",
      remove_keymaps = false,
      select_prompts = false,
      view = {
        centralize_selection = false,
        cursorline = true,
        debounce_delay = 15,
        width = 30,
        hide_root_folder = false,
        side = "left",
        preserve_window_proportions = false,
        number = false,
        relativenumber = false,
        signcolumn = "yes",
        mappings = {
          custom_only = false,
          list = {
            -- user mappings go here
          },
        },
        float = {
          enable = false,
          quit_on_focus_loss = true,
          open_win_config = {
            relative = "editor",
            border = "rounded",
            width = 30,
            height = 30,
            row = 1,
            col = 1,
          },
        },
      },
      renderer = {
        add_trailing = false,
        group_empty = false,
        highlight_git = false,
        full_name = false,
        highlight_opened_files = "none",
        highlight_modified = "none",
        root_folder_label = ":~:s?$?/..?",
        indent_width = 2,
        indent_markers = {
          enable = false,
          inline_arrows = true,
          icons = {
            corner = "└",
            edge = "│",
            item = "│",
            bottom = "─",
            none = " ",
          },
        },
        icons = {
          webdev_colors = true,
          git_placement = "before",
          modified_placement = "after",
          padding = " ",
          symlink_arrow = " ➛ ",
          show = {
            file = true,
            folder = true,
            folder_arrow = true,
            git = true,
            modified = true,
          },
          glyphs = {
            default = "",
            symlink = "",
            bookmark = "",
            modified = "●",
            folder = {
              arrow_closed = "",
              arrow_open = "",
              default = "",
              open = "",
              empty = "",
              empty_open = "",
              symlink = "",
              symlink_open = "",
            },
            git = {
              unstaged = "✗",
              staged = "✓",
              unmerged = "",
              renamed = "➜",
              untracked = "★",
              deleted = "",
              ignored = "◌",
            },
          },
        },
        special_files = { "Cargo.toml", "Makefile", "README.md", "readme.md" },
        symlink_destination = true,
      },
      hijack_directories = {
        enable = true,
        auto_open = true,
      },
      update_focused_file = {
        enable = false,
        update_root = false,
        ignore_list = {},
      },
      ignore_ft_on_setup = {},
      system_open = {
        cmd = "",
        args = {},
      },
      diagnostics = {
        enable = false,
        show_on_dirs = false,
        show_on_open_dirs = true,
        debounce_delay = 50,
        severity = {
          min = vim.diagnostic.severity.HINT,
          max = vim.diagnostic.severity.ERROR,
        },
        icons = {
          hint = "",
          info = "",
          warning = "",
          error = "",
        },
      },
      filters = {
        dotfiles = false,
        git_clean = false,
        no_buffer = false,
        custom = {},
        exclude = {},
      },
      filesystem_watchers = {
        enable = true,
        debounce_delay = 50,
        ignore_dirs = {},
      },
      git = {
        enable = true,
        ignore = true,
        show_on_dirs = true,
        show_on_open_dirs = true,
        timeout = 400,
      },
      modified = {
        enable = false,
        show_on_dirs = true,
        show_on_open_dirs = true,
      },
      actions = {
        use_system_clipboard = true,
        change_dir = {
          enable = true,
          global = false,
          restrict_above_cwd = false,
        },
        expand_all = {
          max_folder_discovery = 300,
          exclude = {},
        },
        file_popup = {
          open_win_config = {
            col = 1,
            row = 1,
            relative = "cursor",
            border = "shadow",
            style = "minimal",
          },
        },
        open_file = {
          quit_on_open = false,
          resize_window = true,
          window_picker = {
            enable = true,
            picker = "default",
            chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
            exclude = {
              filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame" },
              buftype = { "nofile", "terminal", "help" },
            },
          },
        },
        remove_file = {
          close_window = true,
        },
      },
      trash = {
        cmd = "gio trash",
      },
      live_filter = {
        prefix = "[FILTER]: ",
        always_show_folders = true,
      },
      tab = {
        sync = {
          open = false,
          close = false,
          ignore = {},
        },
      },
      notify = {
        threshold = vim.log.levels.INFO,
      },
      ui = {
        confirm = {
          remove = true,
          trash = true,
        },
      },
      log = {
        enable = false,
        truncate = false,
        types = {
          all = false,
          config = false,
          copy_paste = false,
          dev = false,
          diagnostics = false,
          git = false,
          profile = false,
          watcher = false,
        },
      },
    } -- END_DEFAULT_OPTS
<

Here is a list of the options available in the setup call:

*nvim-tree.disable_netrw*
Completely disable netrw
  Type: `boolean`, Default: `false`

It is strongly advised to eagerly disable netrw, due to race conditions at vim
startup.
Set the following at the very beginning of your `init.lua` / `init.vim`: >
    vim.g.loaded_netrw = 1
    vim.g.loaded_netrwPlugin = 1
<
*nvim-tree.hijack_netrw*
Hijack netrw windows (overridden if |disable_netrw| is `true`)
  Type: `boolean`, Default: `true`

*nvim-tree.open_on_setup*
Deprecated: please see https://github.com/nvim-tree/nvim-tree.lua/wiki/Open-At-Startup
Will automatically open the tree when running setup if startup buffer is
a directory, is empty or is unnamed. nvim-tree window will be focused.
  Type: `boolean`, Default: `false`

*nvim-tree.open_on_setup_file*
Deprecated: please see https://github.com/nvim-tree/nvim-tree.lua/wiki/Open-At-Startup
Will automatically open the tree when running setup if startup buffer is a file.
File window will be focused.
File will be found if update_focused_file is enabled.
  Type: `boolean`, Default: `false`

*nvim-tree.ignore_buffer_on_setup*
Deprecated: please see https://github.com/nvim-tree/nvim-tree.lua/wiki/Open-At-Startup
Will ignore the buffer, when deciding to open the tree on setup.
  Type: `boolean`, Default: `false`

*nvim-tree.ignore_ft_on_setup*
Deprecated: please see https://github.com/nvim-tree/nvim-tree.lua/wiki/Open-At-Startup
List of filetypes that will prevent `open_on_setup` to open.
You can use this option if you don't want the tree to open
in some scenarios (eg using vim startify).
  Type: {string}, Default: `{}`

*nvim-tree.auto_reload_on_write*
Reloads the explorer every time a buffer is written to.
  Type: `boolean`, Default: `true`

*nvim-tree.sort_by*
Changes how files within the same directory are sorted.
Can be one of `name`, `case_sensitive`, `modification_time`, `extension` or a
function.
  Type: `string` | `function(nodes)`, Default: `"name"`

  Function is passed a table of nodes to be sorted, each node containing:
  - `absolute_path`: `string`
  - `executable`:    `boolean`
  - `extension`:     `string`
  - `link_to`:       `string`
  - `name`:          `string`
  - `type`:          `"directory"` | `"file"` | `"link"`

  Example: sort by name length: >
    local sort_by = function(nodes)
      table.sort(nodes, function(a, b)
        return #a.name < #b.name
      end)
    end
<
*nvim-tree.hijack_unnamed_buffer_when_opening*
Opens in place of the unnamed buffer if it's empty.
  Type: `boolean`, Default: `false`

*nvim-tree.hijack_cursor*
Keeps the cursor on the first letter of the filename when moving in the tree.
  Type: `boolean`, Default: `false`

*nvim-tree.root_dirs*
Preferred root directories.
Only relevant when `update_focused_file.update_root` is `true`
  Type: `{string}`, Default: `{}`

*nvim-tree.prefer_startup_root*
Prefer startup root directory when updating root directory of the tree.
Only relevant when `update_focused_file.update_root` is `true`
  Type: `boolean`, Default: `false`

*nvim-tree.sync_root_with_cwd*  (previously `update_cwd`)
Changes the tree root directory on `DirChanged` and refreshes the tree.
  Type: `boolean`, Default: `false`

*nvim-tree.reload_on_bufenter*
Automatically reloads the tree on `BufEnter` nvim-tree.
  Type: `boolean`, Default: `false`

*nvim-tree.respect_buf_cwd*
Will change cwd of nvim-tree to that of new buffer's when opening nvim-tree.
  Type: `boolean`, Default: `false`

*nvim-tree.hijack_directories*  (previously `update_to_buf_dir`)
hijacks new directory buffers when they are opened (`:e dir`).

    *nvim-tree.hijack_directories.enable*
    Enable the feature.
    Disable this option if you use vim-dirvish or dirbuf.nvim.
    If `hijack_netrw` and `disable_netrw` are `false`, this feature will be disabled.
      Type: `boolean`, Default: `true`

    *nvim-tree.hijack_directories.auto_open*
    Opens the tree if the tree was previously closed.
      Type: `boolean`, Default: `true`

*nvim-tree.update_focused_file*
Update the focused file on `BufEnter`, un-collapses the folders recursively
until it finds the file.

    *nvim-tree.update_focused_file.enable*
    Enable this feature.
      Type: `boolean`, Default: `false`

    *nvim-tree.update_focused_file.update_root*  (previously `update_focused_file.update_cwd`)
    Update the root directory of the tree if the file is not under current
    root directory. It prefers vim's cwd and `root_dirs`.
    Otherwise it falls back to the folder containing the file.
    Only relevant when `update_focused_file.enable` is `true`
      Type: `boolean`, Default: `false`

    *nvim-tree.update_focused_file.ignore_list*
    List of buffer names and filetypes that will not update the root dir
    of the tree if the file isn't found under the current root directory.
    Only relevant when `update_focused_file.update_root` and
    `update_focused_file.enable` are `true`.
      Type: {string}, Default: `{}`

*nvim-tree.system_open*
Open a file or directory in your preferred application.

    *nvim-tree.system_open.cmd*
    The open command itself.
      Type: `string`, Default: `""`

    Leave empty for OS specific default:
      UNIX:    `"xdg-open"`
      macOS:   `"open"`
      Windows: "`cmd"`

    *nvim-tree.system_open.args*
    Optional argument list.
      Type: {string}, Default: `{}`

    Leave empty for OS specific default:
      Windows: `{ "/c", "start", '""' }`

*nvim-tree.diagnostics*
Show LSP and COC diagnostics in the signcolumn
Note that the modified sign will take precedence over the diagnostics signs.

    `NOTE`: it will use the default diagnostic color groups to highlight the signs.
    If you wish to customize, you can override these groups:
    - `NvimTreeLspDiagnosticsError`
    - `NvimTreeLspDiagnosticsWarning`
    - `NvimTreeLspDiagnosticsInformation`
    - `NvimTreeLspDiagnosticsHint`

    *nvim-tree.diagnostics.enable*
    Enable/disable the feature.
      Type: `boolean`, Default: `false`

    *nvim-tree.diagnostics.debounce_delay*
    Idle milliseconds between diagnostic event and update.
      Type: `number`, Default: `50` (ms)

    *nvim-tree.diagnostics.show_on_dirs*
    Show diagnostic icons on parent directories.
      Type: `boolean`, Default: `false`

    *nvim-tree.diagnostics.show_on_open_dirs*
    Show diagnostics icons on directories that are open.
    Only relevant when `diagnostics.show_on_dirs` is `true`.
      Type: `boolean`, Default: `true`

    *nvim-tree.diagnostics.icons*
    Icons for diagnostic severity.
      Type: `table`, Default: `{ hint = "", info = "", warning = "", error = "" }`

    *nvim-tree.diagnostics.severity*
    Severity for which the diagnostics will be displayed. See |diagnostic-severity|

      *nvim-tree.diagnostics.severity.min*
      Minimum severity.
        Type: |vim.diagnostic.severity|, Default: `vim.diagnostic.severity.HINT`

      *nvim-tree.diagnostics.severity.max*
      Maximum severity.
        Type: |vim.diagnostic.severity|, Default: `vim.diagnostic.severity.ERROR`

*nvim-tree.git*
Git integration with icons and colors.

    *nvim-tree.git.enable*
    Enable / disable the feature.
      Type: `boolean`, Default: `true`

    *nvim-tree.git.ignore*
    Ignore files based on `.gitignore`. Requires |git.enable| `= true`
    Toggle via the `toggle_git_ignored` action, default mapping `I`.
      Type: `boolean`, Default: `true`

    *nvim-tree.git.show_on_dirs*
    Show status icons of children when directory itself has no status icon.
      Type: `boolean`, Default: `true`

    *nvim-tree.git.show_on_open_dirs*
    Show status icons of children on directories that are open.
    Only relevant when `git.show_on_dirs` is `true`.
      Type: `boolean`, Default: `true`

    *nvim-tree.git.timeout*
    Kills the git process after some time if it takes too long.
      Type: `number`, Default: `400` (ms)

  You will still need to set |renderer.icons.show.git| `= true` or
  |renderer.highlight_git| `= true` to be able to see things in the
  tree. This will be changed in the future versions.

  The configurable timeout will kill the current process and so disable the
  git integration for the project that takes too long.
  The git integration is blocking, so if your timeout is too long (like not in
  milliseconds but a few seconds), it will not render anything until the git
  process returned the data.

*nvim-tree.modified*
Indicate which file have unsaved modification.

    *nvim-tree.modified.enable*
    Enable / disable the feature.
      Type: `boolean`, Default: `false`

    *nvim-tree.modified.show_on_dirs*
    Show modified indication on directory whose children are modified.
      Type: `boolean`, Default: `true`

    *nvim-tree.modified.show_on_open_dirs*
    Show modified indication on open directories.
    Only relevant when |modified.show_on_dirs| is `true`.
      Type: `boolean`, Default: `true`

  You will still need to set |renderer.icons.show.modified| `= true` or
  |renderer.highlight_modified| `= true` to be able to see things in the
  tree.

*nvim-tree.filesystem_watchers*
Will use file system watcher (libuv fs_event) to watch the filesystem for
changes.
Using this will disable BufEnter / BufWritePost events in nvim-tree which
were used to update the whole tree. With this feature, the tree will be
updated only for the appropriate folder change, resulting in better
performance.

    *nvim-tree.filesystem_watchers.enable*
    Enable / disable the feature.
      Type: `boolean`, Default: `true`

    *nvim-tree.filesystem_watchers.debounce_delay*
    Idle milliseconds between filesystem change and action.
      Type: `number`, Default: `50` (ms)

    *nvim-tree.filesystem_watchers.ignore_dirs*
    List of vim regex for absolute directory paths that will not be watched.
    Backslashes must be escaped e.g. `"my-project/\\.build$"`. See |string-match|.
    Useful when path is not in `.gitignore` or git integration is disabled.
      Type: {string}, Default: `{}`

*nvim-tree.on_attach*
Function ran when creating the nvim-tree buffer.
This can be used to attach keybindings to the tree buffer.
When on_attach is "disabled", it will use the older mapping strategy, otherwise it
will use the newer one.
    Type: `function(bufnr)`, Default: `"disable"`
    e.g. >
      local api = require("nvim-tree.api")

      local function on_attach(bufnr)
        vim.keymap.set("n", "<C-P>", function()
          local node = api.tree.get_node_under_cursor()
          print(node.absolute_path)
        end, { buffer = bufnr, noremap = true, silent = true, nowait = true, desc = "print the node's absolute path" })
      end
<
*nvim-tree.remove_keymaps*
This can be used to remove the default mappings in the tree.
- Remove specific keys by passing a `string` table of keys
    eg. {"<C-o>", "<CR>", "o", "<Tab>"}
- Remove all default mappings by passing `true`
- Ignore by passing `false`
    Type: `bool` or `{string}`, Default: `false`

*nvim-tree.select_prompts*
Use |vim.ui.select| style prompts. Necessary when using a UI prompt decorator
such as dressing.nvim or telescope-ui-select.nvim
Type: `boolean`, Default: `false`

*nvim-tree.view*
Window / buffer setup.

    *nvim-tree.view.centralize_selection*
    When entering nvim-tree, reposition the view so that the current node is
    initially centralized, see |zz|.
      Type: `boolean`, Default: `false`

    *nvim-tree.view.cursorline*
    Enable |cursorline| in the tree window.
      Type: `boolean`, Default: `true`

    *nvim-tree.view.debounce_delay*
    Idle milliseconds before some reload / refresh operations.
    Increase if you experience performance issues around screen refresh.
      Type: `number`, Default: `15` (ms)

    *nvim-tree.view.hide_root_folder*
    Hide the path of the current working directory on top of the tree.
      Type: `boolean`, Default: `false`

    *nvim-tree.view.width*
    Width of the window: can be a `%` string, a number representing columns, a
    function or a table.
    A table indicates that the view should be dynamically sized based on the
    longest line (previously `view.adaptive_size`).
      Type: `string | number | function | table`, Default: `30`

        *nvim-tree.view.width.min*
        Minimum dynamic width.
          Type: `string | number | function`, Default: `30`

        *nvim-tree.view.width.max*
        Maximum dynamic width, -1 for unbounded.
          Type: `string | number | function`, Default: `-1`

        *nvim-tree.view.width.padding*
        Extra padding to the right.
          Type: `string | number | function`, Default: `1`

    *nvim-tree.view.side*
    Side of the tree, can be `"left"`, `"right"`.
      Type: `string`, Default: `"left"`

    *nvim-tree.view.preserve_window_proportions*
    Preserves window proportions when opening a file.
    If `false`, the height and width of windows other than nvim-tree will be equalized.
      Type: `boolean`, Default: `false`

    *nvim-tree.view.number*
    Print the line number in front of each line.
      Type: `boolean`, Default: `false`

    *nvim-tree.view.relativenumber*
    Show the line number relative to the line with the cursor in front of each line.
    If the option `view.number` is also `true`, the number on the cursor line
    will be the line number instead of `0`.
      Type: `boolean`, Default: `false`

    *nvim-tree.view.signcolumn*
    Show diagnostic sign column. Value can be `"yes"`, `"auto"`, `"no"`.
      Type: `string`, Default: `"yes"`

    *nvim-tree.view.mappings*
    Configuration options for |nvim-tree-mappings|

        *nvim-tree.view.mappings.custom_only*
        Will use only the provided user mappings and not the default otherwise,
        extends the default mappings with the provided user mappings.
          Type: `boolean`, Default: `false`

        *nvim-tree.view.mappings.list*
        A list of keymaps that will extend or override the default keymaps.
          Type: `table`
          Default: see |nvim-tree-default-mappings|

    *nvim-tree.view.float*
    Configuration options for floating window

        *nvim-tree.view.float.enable*
        Tree window will be floating.
          Type: `boolean`, Default: `false`

        *nvim-tree.view.float.quit_on_focus_loss*
        Close the floating tree window when it loses focus.
          Type: `boolean`, Default: `true`

        *nvim-tree.view.float.open_win_config*
        Floating window config. See |nvim_open_win| for more details.
          Type: `table` or `function` that returns a table, Default:
            `{`
              `relative = "editor",`
              `border = "rounded",`
              `width = 30,`
              `height = 30,`
              `row = 1,`
              `col = 1,`
            `}`

*nvim-tree.renderer*
UI rendering setup

    *nvim-tree.renderer.add_trailing*
    Appends a trailing slash to folder names.
      Type: `boolean`, Default: `false`

    *nvim-tree.renderer.group_empty*
    Compact folders that only contain a single folder into one node in the file tree.
      Type: `boolean`, Default: `false`

    *nvim-tree.renderer.full_name*
    Display node whose name length is wider than the width of nvim-tree window in floating window.
      Type: `boolean`, Default: `false`

    *nvim-tree.renderer.highlight_git*
    Enable file highlight for git attributes using `NvimTreeGit*` highlight groups.
    This can be used with or without the icons.
      Type: `boolean`, Default: `false`

    *nvim-tree.renderer.highlight_opened_files*
    Highlight icons and/or names for opened files.
    Value can be `"none"`, `"icon"`, `"name"` or `"all"`.
      Type: `string`, Default: `"none"`

    *nvim-tree.renderer.highlight_modified*
    Highlight icons and/or names for modified files using `NvimTreeModified`
    highlight groups.
    Value can be `"none"`, `"icon"`, `"name"` or `"all"`
    This can be used with or without the icons.
      Type: `string`, Default `"none"`

    *nvim-tree.renderer.root_folder_label*  (previously `renderer.root_folder_modifier`)
    In what format to show root folder. See `:help filename-modifiers` for
    available `string` options.
      Type: `string` or `function(root_cwd)`, Default: `":~:s?$?/..?"`

      Function is passed the absolute path of the root folder and should return a string.
      e.g. >
        my_root_folder_label = function(path)
          return ".../" .. vim.fn.fnamemodify(path, ":t")
        end
<
    *nvim-tree.renderer.indent_width*
    Number of spaces for an each tree nesting level. Minimum 1.
      Type: `number`, Default: `2`

    *nvim-tree.renderer.indent_markers*
    Configuration options for tree indent markers.

        *nvim-tree.renderer.indent_markers.enable*
        Display indent markers when folders are open
          Type: `boolean`, Default: `false`

        *nvim-tree.renderer.indent_markers.inline_arrows*
        Display folder arrows in the same column as indent marker
        when using |renderer.icons.show.folder_arrow|
          Type: `boolean`, Default: `true`

        *nvim-tree.renderer.indent_markers.icons*
        Icons shown before the file/directory. Length 1.
          Type: `table`, Default: `{ corner = "└", edge = "│", item = "│", bottom = "─", none = " ", }`

    *nvim-tree.renderer.icons*
    Configuration options for icons.

        *nvim-tree.renderer.icons.webdev_colors*
        Use the webdev icon colors, otherwise `NvimTreeFileIcon`.
          Type: `boolean`, Default: `true`

        *nvim-tree.renderer.icons.git_placement*
        Place where the git icons will be rendered.
        Can be `"after"` or `"before"` filename (after the file/folders icons)
        or `"signcolumn"` (requires |nvim-tree.view.signcolumn| enabled).
        Note that the diagnostic signs and the modified sign will take precedence over the git signs.
          Type: `string`, Default: `before`

        *nvim-tree.renderer.icons.modified_placement*
        Place where the modified icon will be rendered.
        Can be `"after"` or `"before"` filename (after the file/folders icons)
        or `"signcolumn"` (requires |nvim-tree.view.signcolumn| enabled).
          Type: `string`, Default: `after`

        *nvim-tree.renderer.icons.padding*
        Inserted between icon and filename.
          Type: `string`, Default: `" "`

        *nvim-tree.renderer.icons.symlink_arrow*
        Used as a separator between symlinks' source and target.
          Type: `string`, Default: `" ➛ "`

        *nvim-tree.renderer.icons.show*
        Configuration options for showing icon types.

            *nvim-tree.renderer.icons.show.file*
            Show an icon before the file name. `nvim-web-devicons` will be used if available.
              Type: `boolean`, Default: `true`

            *nvim-tree.renderer.icons.show.folder*
            Show an icon before the folder name.
              Type: `boolean`, Default: `true`

            *nvim-tree.renderer.icons.show.folder_arrow*
            Show a small arrow before the folder node. Arrow will be a part of the
            node when using |renderer.indent_markers|.
              Type: `boolean`, Default: `true`

            *nvim-tree.renderer.icons.show.git*
            Show a git status icon, see |renderer.icons.git_placement|
            Requires |git.enable| `= true`
              Type: `boolean`, Default: `true`

            *nvim-tree.renderer.icons.show.modified*
            Show a modified icon, see |renderer.icons.modified_placement|
            Requires |modified.enable| `= true`
              Type: `boolean`, Default: `true`

        *nvim-tree.renderer.icons.glyphs*
        Configuration options for icon glyphs.
        NOTE: Do not set any glyphs to more than two characters if it's going
        to appear in the signcolumn.

            *nvim-tree.renderer.icons.glyphs.default*
            Glyph for files. Will be overridden by `nvim-web-devicons` if available.
              Type: `string`, Default: `""`

            *nvim-tree.renderer.icons.glyphs.symlink*
            Glyph for symlinks to files.
              Type: `string`, Default: `""`

            *nvim-tree.renderer.icons.glyphs.modified*
            Icon to display for modified files.
              Type: `string`, Default: `"●"`

            *nvim-tree.renderer.icons.glyphs.folder*
            Glyphs for directories.
              Type: `table`, Default:
                `{`
                  `arrow_closed = "",`
                  `arrow_open = "",`
                  `default = "",`
                  `open = "",`
                  `empty = "",`
                  `empty_open = "",`
                  `symlink = "",`
                  `symlink_open = "",`
                `}`

            *nvim-tree.renderer.icons.glyphs.git*
            Glyphs for git status.
              Type: `table`, Default:
                `{`
                  `unstaged = "✗",`
                  `staged = "✓",`
                  `unmerged = "",`
                  `renamed = "➜",`
                  `untracked = "★",`
                  `deleted = "",`
                  `ignored = "◌",`
                `}`

    *nvim-tree.renderer.special_files*
    A list of filenames that gets highlighted with `NvimTreeSpecialFile`.
      Type: `table`, Default: `{ "Cargo.toml", "Makefile", "README.md", "readme.md", }`

    *nvim-tree.renderer.symlink_destination*
    Whether to show the destination of the symlink.
      Type: `boolean`, Default: `true`

*nvim-tree.filters*
Filtering options.

    *nvim-tree.filters.dotfiles*
    Do not show dotfiles: files starting with a `.`
    Toggle via the `toggle_dotfiles` action, default mapping `H`.
      Type: `boolean`, Default: `false`

    *nvim-tree.filters.git_clean*
    Do not show files with no git status. This will show ignored files when
    |nvim-tree.git.ignore| is set, as they are effectively dirty.
    Toggle via the `toggle_git_clean` action, default mapping `C`.
      Type: `boolean`, Default: `false`

    *nvim-tree.filters.no_buffer*
    Do not show files that have no listed buffer.
    Toggle via the `toggle_no_buffer` action, default mapping `B`.
    For performance reasons this may not immediately update on buffer
    delete/wipe. A reload or filesystem event will result in an update.
      Type: `boolean`, Default: `false`

    *nvim-tree.filters.custom*
    Custom list of vim regex for file/directory names that will not be shown.
    Backslashes must be escaped e.g. "^\\.git". See |string-match|.
    Toggle via the `toggle_custom` action, default mapping `U`.
      Type: {string}, Default: `{}`

    *nvim-tree.filters.exclude*
    List of directories or files to exclude from filtering: always show them.
    Overrides `git.ignore`, `filters.dotfiles` and `filters.custom`.
      Type: {string}, Default: `{}`

*nvim-tree.trash*
Configuration options for trashing.

    *nvim-tree.trash.cmd*
    The command used to trash items (must be installed on your system).
    The default is shipped with glib2 which is a common linux package.
    Only available for UNIX.
      Type: `string`, Default: `"gio trash"`

*nvim-tree.actions*
Configuration for various actions.

    *nvim-tree.actions.change_dir*
    vim |current-directory| behaviour.

        *nvim-tree.actions.change_dir.enable*
        Change the working directory when changing directories in the tree.
          Type: `boolean`, Default: `true`

        *nvim-tree.actions.change_dir.global*
        Use `:cd` instead of `:lcd` when changing directories.
        Consider that this might cause issues with the |nvim-tree.sync_root_with_cwd| option.
          Type: `boolean`, Default: `false`

        *nvim-tree.actions.change_dir.restrict_above_cwd*
        Restrict changing to a directory above the global current working directory.
          Type: `boolean`, Default: `false`

    *nvim-tree.actions.expand_all*
    Configuration for expand_all behaviour.

        *nvim-tree.actions.expand_all.max_folder_discovery*
        Limit the number of folders being explored when expanding every folders.
        Avoids hanging neovim when running this action on very large folders.
          Type: `number`, Default: `300`

        *nvim-tree.actions.expand_all.exclude*
        A list of directories that should not be expanded automatically.
        E.g `{ ".git", "target", "build" }` etc.
          Type: `table`, Default: `{}`

    *nvim-tree.actions.file_popup*
    Configuration for file_popup behaviour.

        *nvim-tree.actions.file_popup.open_win_config*
        Floating window config for file_popup. See |nvim_open_win| for more details.
        You shouldn't define `"width"` and `"height"` values here. They will be
        overridden to fit the file_popup content.
          Type: `table`, Default:
            `{`
              `col = 1,`
              `row = 1,`
              `relative = "cursor",`
              `border = "shadow",`
              `style = "minimal",`
            `}`

    *nvim-tree.actions.open_file*
    Configuration options for opening a file from nvim-tree.

        *nvim-tree.actions.open_file.quit_on_open*
        Closes the explorer when opening a file.
        It will also disable preventing a buffer overriding the tree.
          Type: `boolean`, Default: `false`

        *nvim-tree.actions.open_file.resize_window*  (previously `view.auto_resize`)
        Resizes the tree when opening a file.
          Type: `boolean`, Default: `true`

        *nvim-tree.actions.open_file.window_picker*
        Window picker configuration.

            *nvim-tree.actions.open_file.window_picker.enable*
            Enable the feature. If the feature is not enabled, files will open in window
            from which you last opened the tree.
              Type: `boolean`, Default: `true`

            *nvim-tree.actions.open_file.window_picker.picker*
            Change the default window picker, can be a string `"default"` or a function.
            The function should return the window id that will open the node,
            or `nil` if an invalid window is picked or user cancelled the action.
              Type: `string` | `function`, Default: `"default"`
              e.g. s1n7ax/nvim-window-picker plugin: >
                window_picker = {
                  enable = true,
                  picker = require('window-picker').pick_window,
<
            *nvim-tree.actions.open_file.window_picker.chars*
            A string of chars used as identifiers by the window picker.
              Type: `string`, Default: `"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"`

            *nvim-tree.actions.open_file.window_picker.exclude*
            Table of buffer option names mapped to a list of option values that indicates
            to the picker that the buffer's window should not be selectable.
              Type: `table`
              Default:
                `{`
                  `filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame", },`
                  `buftype  = { "nofile", "terminal", "help", }`
                `}`

    *nvim-tree.actions.remove_file.close_window*
    Close any window displaying a file when removing the file from the tree.
      Type: `boolean`, Default: `true`

    *nvim-tree.actions.use_system_clipboard*
    A boolean value that toggle the use of system clipboard when copy/paste
    function are invoked. When enabled, copied text will be stored in registers
    '+' (system), otherwise, it will be stored in '1' and '"'.
      Type: `boolean`, Default: `true`

*nvim-tree.live_filter*
Configurations for the live_filtering feature.
The live filter allows you to filter the tree nodes dynamically, based on
regex matching (see |vim.regex|).
This feature is bound to the `f` key by default.
The filter can be cleared with the `F` key by default.

    *nvim-tree.live_filter.prefix*
    Prefix of the filter displayed in the buffer.
      Type: `string`, Default: `"[FILTER]: "`

    *nvim-tree.live_filter.always_show_folders*
    Whether to filter folders or not.
      Type: `boolean`, Default: `true`

*nvim-tree.tab*
Configuration for tab behaviour.

    *nvim-tree.tab.sync*
    Configuration for syncing nvim-tree across tabs.

        *nvim-tree.tab.sync.open*  (previously `nvim-tree.open_on_tab`)
        Opens the tree automatically when switching tabpage or opening a new
        tabpage if the tree was previously open.
          Type: `boolean`, Default: `false`

        *nvim-tree.tab.sync.close*
        Closes the tree across all tabpages when the tree is closed.
          Type: `boolean`, Default: `false`

        *nvim-tree.tab.sync.ignore*  (previously `nvim-tree.ignore_buf_on_tab_change`)
        List of filetypes or buffer names on new tab that will prevent
        |nvim-tree.tab.sync.open| and |nvim-tree.tab.sync.close|
          Type: {string}, Default: `{}`

*nvim-tree.notify*
Configuration for notification.

    *nvim-tree.notify.threshold*
    Specify minimum notification level, uses the values from |vim.log.levels|
      Type: `enum`, Default: `vim.log.levels.INFO`

    `ERROR`:   hard errors e.g. failure to read from the file system.
    `WARNING`: non-fatal errors e.g. unable to system open a file.
    `INFO:`    information only e.g. file copy path confirmation.
    `DEBUG:`   not used.

*nvim-tree.ui*
General UI configuration.

    *nvim-tree.ui.confirm*
    Confirmation prompts.

        *nvim-tree.ui.confirm.remove*
        Prompt before removing.
          Type: `boolean`, Default: `true`

        *nvim-tree.ui.confirm.trash*  (previously `trash.require_confirm`)
        Prompt before trashing.
          Type: `boolean`, Default: `true`

*nvim-tree.log*
Configuration for diagnostic logging.

    *nvim-tree.log.enable*
    Enable logging to a file `$XDG_CACHE_HOME/nvim/nvim-tree.log`
      Type: `boolean`, Default: `false`

    *nvim-tree.log.truncate*
    Remove existing log file at startup.
      Type: `boolean`, Default: `false`

    *nvim-tree.log.types*
    Specify which information to log.

        *nvim-tree.log.types.all*
        Everything.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.profile*
        Timing of some operations.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.config*
        Options and mappings, at startup.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.copy_paste*
        File copy and paste actions.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.dev*
        Used for local development only. Not useful for users.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.diagnostics*
        LSP and COC processing, verbose.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.git*
        Git processing, verbose.
          Type: `boolean`, Default: `false`

        *nvim-tree.log.types.watcher*
        |nvim-tree.filesystem_watchers| processing, verbose.
          Type: `boolean`, Default: `false`

==============================================================================
 5. API                                                   *nvim-tree-api*

Nvim-tree's public API can be used to access features.
>
e.g. >
    local api = require("nvim-tree.api")
    api.tree.toggle()
<
This module exposes stable functionalities, it is advised to use this in order
to avoid breaking configurations due to internal breaking changes.

The api is separated in multiple modules, which can be accessed with
`api.<module>.<function>`

Functions that needs a tree node parameter are exposed with an abstraction
that injects the node from the cursor position in the tree when calling
the function. It will use the node you pass as an argument in priority if it
exists.

api.tree.open({opts})                              *nvim-tree.api.tree.open()*
    Open the tree, focusing it if already open.

    Parameters: ~
      • {opts} (table) optional parameters with boolean defaults

    Options: ~
      • {path}           (string)         root directory for the tree
      • {current_window} (boolean, false) open the tree in the current window
      • {find_file}      (boolean, false) find the current buffer
      • {update_root}    (boolean, false) see |nvim-tree.update_focused_file.update_root|

api.tree.toggle({opts})                          *nvim-tree.api.tree.toggle()*
    Open or close the tree.

    Parameters: ~
      • {opts} (table) optional parameters with boolean defaults

    Options: ~
      • {path}           (string)         root directory for the tree
      • {current_window} (boolean, false) open the tree in the current window
      • {find_file}      (boolean, false) find the current buffer
      • {update_root}    (boolean, false) see |nvim-tree.update_focused_file.update_root|
      • {focus}          (boolean, true)  focus the tree when opening

api.tree.close()                                   *nvim-tree.api.tree.close()*
    Close the tree, affecting all tabs as per |nvim-tree.tab.sync.close|

api.tree.close_in_this_tab()           *nvim-tree.api.tree.close_in_this_tab()*
    Close the tree in this tab only.

api.tree.close_in_all_tabs()           *nvim-tree.api.tree.close_in_all_tabs()*
    Close the tree in all tabs.

api.tree.focus()                                   *nvim-tree.api.tree.focus()*
    Focus the tree, opening it if necessary.

api.tree.reload()                                  *nvim-tree.api.tree.reload()*
    Refresh the tree. Does nothing if closed.

api.tree.change_root({path})                 *nvim-tree.api.tree.change_root()*
    Change the tree's root to a path.

    Parameters: ~
      • {path} (string) absolute or relative path

                                     *nvim-tree.api.tree.change_root_to_node()*
api.tree.change_root_to_node({node})
    Change the tree's root to a folder node or the parent of a file node.

    Parameters: ~
      • {node} (Node) folder or file

                                   *nvim-tree.api.tree.change_root_to_parent()*
api.tree.change_root_to_parent({node})
    Change the tree's root to the parent of a node.

    Parameters: ~
      • {node} (Node) folder or file

api.tree.get_node_under_cursor()   *nvim-tree.api.tree.get_node_under_cursor()*
    Retrieve the currently focused node.

    Return: ~
      node or nil if tree is not visible

api.tree.get_nodes()                           *nvim-tree.api.tree.get_nodes()*
    Retrieve a hierarchical list of all the nodes. This is a cloned list for
    reference purposes only and should not be passed into other API functions.

    Return: ~
      table of nodes

api.tree.find_file({path})                     *nvim-tree.api.tree.find_file()*
    Find and focus a file or folder in the tree.

    Parameters: ~
      • {path} (string) absolute path

api.tree.search_node()                       *nvim-tree.api.tree.search_node()*
    Open the search dialogue as per the search_node action.

api.tree.collapse_all({keep_buffers})       *nvim-tree.api.tree.collapse_all()*
    Collapse the tree.

    Parameters: ~
      • {keep_buffers} (boolean) do not collapse nodes with open buffers.

api.tree.expand_all({keep_buffers})           *nvim-tree.api.tree.expand_all()*
    Expand all nodes in the tree.

                                 *nvim-tree.api.tree.toggle_gitignore_filter()*
api.tree.toggle_gitignore_filter()
    Toggle |nvim-tree.git.ignore| filter.

                                 *nvim-tree.api.tree.toggle_git_clean_filter()*
api.tree.toggle_git_clean_filter()
    Toggle |nvim-tree.filters.git_clean| filter.

                                 *nvim-tree.api.tree.toggle_no_buffer_filter()*
api.tree.toggle_no_buffer_filter()
    Toggle |nvim-tree.filters.no_buffer| filter.

                                    *nvim-tree.api.tree.toggle_custom_filter()*
api.tree.toggle_custom_filter()
    Toggle |nvim-tree.filters.custom| filter.

                                    *nvim-tree.api.tree.toggle_hidden_filter()*
api.tree.toggle_hidden_filter()
    Toggle |nvim-tree.filters.dotfiles| filter.

api.tree.toggle_help()                       *nvim-tree.api.tree.toggle_help()*
    Toggle help view.

- api.fs:                                               *nvim-tree.api.fs*
    - create
    - remove
    - trash
    - rename_node `(node: table, modifier?: string vim.fn.fnamemodify argument)`
    - rename
    - rename_sub
    - rename_basename
    - cut
    - paste
    - clear_clipboard
    - print_clipboard
    - copy.node
    - copy.absolute_path
    - copy.filename
    - copy.relative_path

- api.node:                                             *nvim-tree.api.node*
    - open.edit
    - open.replace_tree_buffer
    - open.no_window_picker
    - open.vertical
    - open.horizontal
    - open.tab
    - open.preview
    - show_info_popup
    - run.cmd
    - run.system
    - navigate.sibling.next
    - navigate.sibling.prev
    - navigate.sibling.first
    - navigate.sibling.last
    - navigate.parent
    - navigate.parent_close
    - navigate.git.next
    - navigate.git.prev
    - navigate.diagnostics.next
    - navigate.diagnostics.prev

- api.git:                                              *nvim-tree.api.git*
    - reload

- api.events:                                           *nvim-tree.api.events*
    - subscribe `(eventType: Event, callback: function(...args))`
    - Event (enum type, please see |nvim_tree_events_kind|)

- api.live_filter:                                      *nvim-tree.api.live_filter*
    - start
    - clear

- api.marks:                                            *nvim-tree.api.marks*
    - get
    - list
    - toggle
    - clear
    - bulk.move
    - navigate.next
    - navigate.prev
    - navigate.select

api.config.mappings.active()          *nvim-tree.api.config.mappings.active()*
    Retrieve a clone of the currently active mappings:
    |nvim-tree-default-mappings| with |nvim-tree.view.mappings| applied.
    Changing the active mappings will require a call to |nvim-tree-setup|

    Return: ~
        (table) as per |nvim-tree.view.mappings.list|

api.config.mappings.default()        *nvim-tree.api.config.mappings.default()*
    Retrieve a clone of the default mappings: |nvim-tree-default-mappings|

    Return: ~
        (table) as per |nvim-tree.view.mappings.list|

==============================================================================
 6. MAPPINGS                                              *nvim-tree-mappings*

Setting your own mapping in the configuration will soon be deprecated, see
|nvim-tree.on_attach| for experimental replacement.

`view.mappings.list` is a table of:
  {key}       (string|table of string) mandatory |{lhs}|.

  {action}    (string) mandatory name of the action.
              `""` to remove an action with {key}. The case of {key} must
              exactly match the action you are removing e.g. `'<Tab>'` to
              remove the default preview action.
              An arbitrary description when using `action_cb`.

  {action_cb} (function) optional custom function that will be called.
              Receives the node as a parameter.
              Non-empty description for `action` is required.

  {mode}      (string) optional mode as per |nvim_set_keymap|.
              Default `'n'`.

Examples:
>
    local function print_node_path(node)
      print(node.absolute_path)
    end

    ----

    view = {
      mappings = {
        list = {
          -- remove a default mapping for cd
          { key = "<2-RightMouse>", action = "" },

          -- add multiple normal mode mappings for edit
          { key = { "<CR>", "o" }, action = "edit", mode = "n" },

          -- custom action
          { key = "p", action = "print_the_node_path", action_cb = print_node_path },

          ----
<
Mouse support defined in |KeyBindings|

Single left mouse mappings can be achieved via `<LeftRelease>`.

Single right / middle mouse mappings will requre changes to |mousemodel| or |mouse|.

DEFAULT MAPPINGS                                     *nvim-tree-default-mappings*

`<CR>`            edit                open a file or folder; root will cd to the above directory
`o`
`<2-LeftMouse>`
`<C-e>`           edit_in_place       edit the file in place, effectively replacing the tree explorer
`O`               edit_no_picker      same as (edit) with no window picker
`<C-]>`           cd                  cd in the directory under the cursor
`<2-RightMouse>`
`<C-v>`           vsplit              open the file in a vertical split
`<C-x>`           split               open the file in a horizontal split
`<C-t>`           tabnew              open the file in a new tab
`<`               prev_sibling        navigate to the previous sibling of current file/directory
`>`               next_sibling        navigate to the next sibling of current file/directory
`P`               parent_node         move cursor to the parent directory
`<BS>`            close_node          close current opened directory or parent
`<Tab>`           preview             open the file as a preview (keeps the cursor in the tree)
`K`               first_sibling       navigate to the first sibling of current file/directory
`J`               last_sibling        navigate to the last sibling of current file/directory
`C`               toggle_git_clean    toggle visibility of git clean via |filters.git_clean| option
`I`               toggle_git_ignored  toggle visibility of files/folders hidden via |git.ignore| option
`H`               toggle_dotfiles     toggle visibility of dotfiles via |filters.dotfiles| option
`B`               toggle_no_buffer    toggle visibility of files/folders hidden via |filters.no_buffer| option
`U`               toggle_custom       toggle visibility of files/folders hidden via |filters.custom| option
`R`               refresh             refresh the tree
`a`               create              add a file; leaving a trailing `/` will add a directory
`d`               remove              delete a file (will prompt for confirmation)
`D`               trash               trash a file via |trash| option
`r`               rename              rename a file
`<C-r>`           full_rename         rename a file and omit the filename on input
`e`               rename_basename     rename a file with filename-modifiers ':t:r' without changing extension
`x`               cut                 add/remove file/directory to cut clipboard
`c`               copy                add/remove file/directory to copy clipboard
`p`               paste               paste from clipboard; cut clipboard has precedence over copy; will prompt for confirmation
`y`               copy_name           copy name to system clipboard
`Y`               copy_path           copy relative path to system clipboard
`gy`              copy_absolute_path  copy absolute path to system clipboard
`[e`              prev_diag_item      go to next diagnostic item
`[c`              prev_git_item       go to next git item
`]e`              next_diag_item      go to prev diagnostic item
`]c`              next_git_item       go to prev git item
`-`               dir_up              navigate up to the parent directory of the current file/directory
`s`               system_open         open a file with default system application or a folder with default file manager, using |system_open| option
`f`               live_filter         live filter nodes dynamically based on regex matching.
`F`               clear_live_filter   clear live filter
`q`               close               close tree window
`W`               collapse_all        collapse the whole tree
`E`               expand_all          expand the whole tree, stopping after expanding |actions.expand_all.max_folder_discovery| folders; this might hang neovim for a while if running on a big folder
`S`               search_node         prompt the user to enter a path and then expands the tree to match the path
`.`               run_file_command    enter vim command mode with the file the cursor is on
`<C-k>`           toggle_file_info    toggle a popup with file infos about the file under the cursor
`g?`              toggle_help         toggle help
`m`               toggle_mark         Toggle node in bookmarks
`bmv`             bulk_move           Move all bookmarked nodes into specified location

>
  view.mappings.list = { -- BEGIN_DEFAULT_MAPPINGS
    { key = { "<CR>", "o", "<2-LeftMouse>" }, action = "edit" },
    { key = "<C-e>",                          action = "edit_in_place" },
    { key = "O",                              action = "edit_no_picker" },
    { key = { "<C-]>", "<2-RightMouse>" },    action = "cd" },
    { key = "<C-v>",                          action = "vsplit" },
    { key = "<C-x>",                          action = "split" },
    { key = "<C-t>",                          action = "tabnew" },
    { key = "<",                              action = "prev_sibling" },
    { key = ">",                              action = "next_sibling" },
    { key = "P",                              action = "parent_node" },
    { key = "<BS>",                           action = "close_node" },
    { key = "<Tab>",                          action = "preview" },
    { key = "K",                              action = "first_sibling" },
    { key = "J",                              action = "last_sibling" },
    { key = "C",                              action = "toggle_git_clean" },
    { key = "I",                              action = "toggle_git_ignored" },
    { key = "H",                              action = "toggle_dotfiles" },
    { key = "B",                              action = "toggle_no_buffer" },
    { key = "U",                              action = "toggle_custom" },
    { key = "R",                              action = "refresh" },
    { key = "a",                              action = "create" },
    { key = "d",                              action = "remove" },
    { key = "D",                              action = "trash" },
    { key = "r",                              action = "rename" },
    { key = "<C-r>",                          action = "full_rename" },
    { key = "e",                              action = "rename_basename" },
    { key = "x",                              action = "cut" },
    { key = "c",                              action = "copy" },
    { key = "p",                              action = "paste" },
    { key = "y",                              action = "copy_name" },
    { key = "Y",                              action = "copy_path" },
    { key = "gy",                             action = "copy_absolute_path" },
    { key = "[e",                             action = "prev_diag_item" },
    { key = "[c",                             action = "prev_git_item" },
    { key = "]e",                             action = "next_diag_item" },
    { key = "]c",                             action = "next_git_item" },
    { key = "-",                              action = "dir_up" },
    { key = "s",                              action = "system_open" },
    { key = "f",                              action = "live_filter" },
    { key = "F",                              action = "clear_live_filter" },
    { key = "q",                              action = "close" },
    { key = "W",                              action = "collapse_all" },
    { key = "E",                              action = "expand_all" },
    { key = "S",                              action = "search_node" },
    { key = ".",                              action = "run_file_command" },
    { key = "<C-k>",                          action = "toggle_file_info" },
    { key = "g?",                             action = "toggle_help" },
    { key = "m",                              action = "toggle_mark" },
    { key = "bmv",                            action = "bulk_move" },
  } -- END_DEFAULT_MAPPINGS
<

==============================================================================
 7. HIGHLIGHT GROUPS                                     *nvim-tree-highlight*

All the following highlight groups can be configured by hand. Aside from
`NvimTreeWindowPicker`, it is not advised to colorize the background of these
groups.

Example (in your `init.vim`):
>
    highlight NvimTreeSymlink guifg=blue gui=bold,underline
<
You should have 'termguicolors' enabled, otherwise, colors will not be
applied.

To view the active highlight groups run `:so $VIMRUNTIME/syntax/hitest.vim`
as per |:highlight|

Default linked group follows name.

NvimTreeSymlink
NvimTreeFolderName          (Directory)
NvimTreeRootFolder
NvimTreeFolderIcon
NvimTreeOpenedFolderIcon    (NvimTreeFolderIcon)
NvimTreeClosedFolderIcon    (NvimTreeFolderIcon)
NvimTreeFileIcon
NvimTreeEmptyFolderName     (Directory)
NvimTreeOpenedFolderName    (Directory)
NvimTreeExecFile
NvimTreeOpenedFile
NvimTreeModifiedFile
NvimTreeSpecialFile
NvimTreeImageFile
NvimTreeIndentMarker

NvimTreeLspDiagnosticsError         (DiagnosticError)
NvimTreeLspDiagnosticsWarning       (DiagnosticWarn)
NvimTreeLspDiagnosticsInformation   (DiagnosticInfo)
NvimTreeLspDiagnosticsHint          (DiagnosticHint)

NvimTreeGitDirty
NvimTreeGitStaged
NvimTreeGitMerge
NvimTreeGitRenamed
NvimTreeGitNew
NvimTreeGitDeleted
NvimTreeGitIgnored      (Comment)

NvimTreeWindowPicker

There are also links to normal bindings to style the tree itself.

NvimTreeNormal
NvimTreeEndOfBuffer     (NonText)
NvimTreeCursorLine      (CursorLine)
NvimTreeCursorLineNr    (CursorLineNr)
NvimTreeLineNr          (LineNr)
NvimTreeWinSeparator    (WinSeparator)
NvimTreeCursorColumn    (CursorColumn)

There are also links for file highlight with git properties, linked to their
Git equivalent:

NvimTreeFileDirty       (NvimTreeGitDirty)
NvimTreeFileStaged      (NvimTreeGitStaged)
NvimTreeFileMerge       (NvimTreeGitMerge)
NvimTreeFileRenamed     (NvimTreeGitRenamed)
NvimTreeFileNew         (NvimTreeGitNew)
NvimTreeFileDeleted     (NvimTreeGitDeleted)
NvimTreeFileIgnored     (NvimTreeGitIgnored)

There are 2 highlight groups for the live filter feature

NvimTreeLiveFilterPrefix
NvimTreeLiveFilterValue

Color of the bookmark icon

NvimTreeBookmark


==============================================================================
 8. EVENTS                                                  *nvim-tree-events*

|nvim_tree_events|

nvim-tree will dispatch events whenever an action is made. These events can be
subscribed to through handler functions. This allows for even further
customization of nvim-tree.

A handler for an event is just a function which receives one argument, the
payload of the event. The payload is different for each event type. Refer
to |nvim_tree_registering_handlers| for more information.

|nvim_tree_registering_handlers|

Handlers are registered by calling |nvim-tree-api| `events.subscribe`
function with an `events.Event` kind.

e.g. handler for node renamed: >
    local api = require("nvim-tree.api")
    local Event = api.events.Event

    api.events.subscribe(Event.NodeRenamed, function(data)
      print("Node renamed from " .. data.old_name .. " to " ..  data.new_name)
    end)
<
|nvim_tree_events_kind|

- Event.Ready
                When NvimTree has been initialized
                • Note: Handler takes no parameter.

- Event.TreeOpen
                • Note: Handler takes no parameter.

- Event.TreeClose
                • Note: Handler takes no parameter.

- Event.Resize - When NvimTree is resized.
                handler parameters: ~
                    size:        `number` size of the view in columns.

- Event.NodeRenamed
                • Note: A node can either be a file or a directory.
                handler parameters: ~
                  {old_name}     `{string}` Absolute path to the old node location.
                  {new_name}     `{string}` Absolute path to the new node location.

- Event.FileCreated
                handler parameters: ~
                  {fname}        `{string}` Absolute path to the created file

- Event.FileRemoved
                handler parameters: ~
                  {fname}        `{string}` Absolute path to the removed file.

- Event.FolderCreated
                handler parameters: ~
                  {folder_name}  `{string}` Absolute path to the created folder.

- Event.FolderRemoved
                handler parameters: ~
                  {folder_name}  `{string}` Absolute path to the removed folder.

- Event.TreeAttachedPost
                Invoked after the tree's buffer has been created and mappings
                have been applied: |nvim-tree-mappings| or |nvim-tree.on_attach|
                handler parameters: ~
                  {buf}          `{number} `API buffer handle (buffer number)

|nvim_tree_events_startup|

There are two special startup events in the form of User autocommands:

`NvimTreeRequired`      first `require("nvim-tree")`
`NvimTreeSetup`         `setup({})` completed

Immediately before firing: a global variable of the same name will be set to a
value of 1.

Example subscription: >
  vim.api.nvim_create_autocmd("User", {
    pattern = "NvimTreeRequired",
    callback = function(data)
      ---
    end,
  })
<
==============================================================================
 9. BOOKMARKS                                            *nvim-tree-bookmarks*

You can toggle marks on files/folders with
`require("nvim-tree.api").marks.toggle(node)` which is bound to `m` by
default.

To get the list of marked paths, you can call
`require("nvim-tree.api").marks.list()`. This will return `{node}`.

*nvim-tree.bookmarks.navigation*

Navigation for marks is not bound by default in nvim-tree because we don't
want to focus the tree view each time we wish to switch to another mark.

This requires binding bookmark navigation yourself.

-- in your lua configuration
vim.keymap.set("n", "<leader>mn", require("nvim-tree.api").marks.navigate.next)
vim.keymap.set("n", "<leader>mp", require("nvim-tree.api").marks.navigate.prev)
vim.keymap.set("n", "<leader>ms", require("nvim-tree.api").marks.navigate.select)

==============================================================================
 10. OS SPECIFIC RESTRICTIONS                          *nvim-tree-os-specific*

macOS
- Trash is unavailable

Windows WSL and PowerShell
- Trash is unavailable
- Executable file detection is disabled as this is non-performant and can
  freeze nvim
- Some filesystem watcher error related to permissions will not be reported

 vim:tw=78:ts=4:sw=4:et:ft=help:norl:
